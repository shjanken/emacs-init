* emacs init file
  :PROPERTIES:
  :header-args:elisp: :tangle ~/.emacs.d/init.el
  :END:

** my funcqtions
   #+BEGIN_SRC elisp
     (defun set-mark-and-show-message (arg)
       "Run set mark command and show a message"
       (interactive "P")
       (message "Set Marked!")
       (set-mark-command arg))

     (defun show-all-buffers-with-file
         ()
       (interactive)
       (list-buffers 1))

     (global-set-key (kbd "<f7>") 'show-all-buffers-with-file)
   #+END_SRC

   关闭 =emacs= 的 "dududu" 的报警声音 
   #+BEGIN_SRC elisp
     (setq visible-bell nil)
     (setq ring-bell-function 'ignore)
   #+END_SRC

** use mepal package reposity
   #+BEGIN_SRC elisp
     (require 'package) ;; You might already have this line
     (setq package-archives '(("gnu"   . "http://elpa.emacs-china.org/gnu/")
                              ("melpa" . "http://elpa.emacs-china.org/melpa/")))
     (package-initialize)
   #+END_SRC

   use customize replaced!

   <2017-07-12>
   use emacs china elpa mirrow

** install package manager
   #+BEGIN_SRC elisp
     (defvar bootstrap-version)
     (let ((bootstrap-file
	    (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	   (bootstrap-version 5))
       (unless (file-exists-p bootstrap-file)
	 (with-current-buffer
	     (url-retrieve-synchronously
	      "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	      'silent 'inhibit-cookies)
	   (goto-char (point-max))
	   (eval-print-last-sexp)))
       (load bootstrap-file nil 'nomessage))
   #+END_SRC

** emacs packages 

*** use-packages
    #+BEGIN_SRC elisp
      (straight-use-package 'use-package)
    #+END_SRC
*** awesome-tray
    [[https://github.com/manateelazycat/awesome-tray][github address]]. not in the melpa
    #+BEGIN_SRC elisp
      (use-package awesome-tray
	:straight (awesome-tray :type git :host github :repo "manateelazycat/awesome-tray")
	:config
	(awesome-tray-mode 1))
    #+END_SRC

*** awesome-tab
    [[https://github.com/manateelazycat/awesome-tab][github address]]
    我非常喜欢的一个包. 在顶部显示相关的 tab
    #+BEGIN_SRC elisp
      ;; the tab dependency projectile package
      (use-package projectile
	:straight t
	:config
	(projectile-mode +1)
	(use-package awesome-tab
	:straight (awesome-tab :type git :host github :repo "manateelazycat/awesome-tab")
	  :config
	  (awesome-tab-mode t)))
    #+END_SRC

*** Ivy, Counsel, Swiper
    #+BEGIN_SRC elisp
      (use-package ivy
	:straight t
	:bind (("C-x b" . ivy-switch-buffer)))

      (use-package counsel
	:straight t
	:bind (("C-x C-f" . counsel-find-file)
	       ("M-x" . counsel-M-x)
	       ("C-h f" . counsel-describe-function)
	       ("<f1> l" . counsel-find-library)
	       ("C-x C-r" . counsel-recentf)))

      (use-package swiper
	:straight t
	:bind (("C-s" . swiper)))
    #+END_SRC

*** Hydras
    hydras and example

    #+BEGIN_SRC elisp
      (use-package hydra
	:straight t
	:config
	(defhydra hydra-zoom (global-map "<f2>")
	  "zoom"
	  ("g" text-scale-increase "in")
	  ("l" text-scale-decrease "out")))
    #+END_SRC

*** my ewsw package
    #+BEGIN_SRC elisp
      (use-package ewsw
	:straight (ewsw :type git :host github :repo "shjanken/emacs-websocket-sucem")
	:init (use-package websocket :straight t)
	:config
	(defhydra hydra-sucem (global-map "C-c s")
	  "
      Press _s_ to search info.
      Press _d_ to delete the entry
      "
	  ("s" ewsw-send-cgylr-search nil)
	  ("d" ewsw-send-delete-yw nil)
	  ("r" ewsw-close-ewsw-buffer "close the ewsw buffer"))

	(define-key global-map (kbd "C-c s") 'hydra-sucem/body))

    #+END_SRC

*** rainbow delimiters
    #+BEGIN_SRC elisp
      (use-package rainbow-delimiters
	:straight t
	:config
	(add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
    #+END_SRC

*** smart parens
    我不能没有这个包
    #+BEGIN_SRC elisp
      (use-package smartparens
	:straight t
	:config
	(add-hook 'prog-mode-hook #'smartparens-mode)
	(defhydra hydra-sp (prog-mode-map
			    "C-c p"
			    :pre (set-cursor-color "#40e0d0")
			    :post (set-cursor-color "#ffffff"))
	  "smart parens"
	  ("p" sp-splice-sexp "去表达式的括号")
	  ("r" sp-rewrapp-sex "修改括号")
	  ("f" sp-forward-slurp-sexp "向前吞掉一个表达式")
	  ("b" sp-forward-barf-sexp "收缩括号")))
    #+END_SRC

*** cursor movement 
    #+BEGIN_SRC elisp
      (defhydra hydra-move
	(global-map "<f2>")
	"movement"
	("w" forward-word "forward word")
	("b" backward-word "backward word")
	("s" forward-sexp "forward sexp")
	("B" backward-sexp "backward sexp"))

      (define-key global-map (kbd "<f2>") 'hydra-move/body)
    #+END_SRC
