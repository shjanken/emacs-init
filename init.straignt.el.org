#+title: Emacs init file
#+STARTUP: hidestars
#+STARTUP: content
#+roam_alias: "emasc init file"
#+property: header-args:elisp :tangle ~/.emacs.d/init.el

this init file install package with =user-package= and =straight=.
Some package is in the github.


- tags :: dotfile, [[file:../linux.org][Linux]]

* emacs init file
  :PROPERTIES:
  :header-args:elisp: :tangle ~/.emacs.d/init.el
  :END:

** my functions
   #+BEGIN_SRC elisp
     (defun set-mark-and-show-message (arg)
       "Run set mark command and show a message"
       (interactive "P")
       (message "Set Marked!")
       (set-mark-command arg))

     (defun show-all-buffers-with-file
	 ()
       (interactive)
       (list-buffers 1))

     (global-set-key (kbd "<f7>") 'show-all-buffers-with-file)
     (global-set-key (kbd "<f2>") 'set-mark-and-show-message)
   #+END_SRC

   关闭 =emacs= 的 "dududu" 的报警声音 
   #+BEGIN_SRC elisp
     (setq visible-bell nil)
     (setq ring-bell-function 'ignore)
   #+END_SRC
   
   使用 =ibuffer= 代替 =bufferlist=
   #+BEGIN_SRC elisp
     (global-set-key (kbd "C-x C-b") 'ibuffer)
   #+END_SRC

** use mepal package reposity
   #+BEGIN_SRC elisp
     (require 'package) ;; You might already have this line
     (setq package-archives '(("gnu"   . "http://elpa.emacs-china.org/gnu/")
                              ("melpa" . "http://elpa.emacs-china.org/melpa/")))
     ;; (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
     (package-initialize)
   #+END_SRC

   *use customize replaced!*

   <2017-07-12>
   use emacs china elpa mirrow

** install package manager
   #+BEGIN_SRC elisp
     (defvar bootstrap-version)
     (let ((bootstrap-file
            (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
           (bootstrap-version 5))
       (unless (file-exists-p bootstrap-file)
         (with-current-buffer
             (url-retrieve-synchronously
              "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
              'silent 'inhibit-cookies)
           (goto-char (point-max))
           (eval-print-last-sexp)))
       (load bootstrap-file nil 'nomessage))
   #+END_SRC

** my default setting
   
*** set my default directory when emacs start
    #+BEGIN_SRC elisp
      (setq command-line-default-directory "~/")
      (setq default-directory "~/")
      (scroll-bar-mode -1) ; disable scroll bar
      (tool-bar-mode -1) ; disable tool bar
      (show-paren-mode) ; hight light match parens
      (setq inhibit-startup-screen t)
    #+END_SRC
*** org mode
**** set babel execute language
     设置 ~org babel~ 代码块里面可以运行的语言
     #+BEGIN_SRC elisp
       (org-babel-do-load-languages
        'org-babel-load-languages '((clojure . t)
                                    (emacs-lisp . t)
                                    (ditaa . t)
                                    (shell . t)
                                    (js . t)))

       (setq org-confirm-babel-evaluate nil)
     #+END_SRC

*** set no auto backup
    disable auto backup. ( backup~ & #autobackup#)
    #+BEGIN_SRC elisp
      (setq make-backup-files nil)
      (setq auto-save-default nil)
      (setq create-lockfiles nil) ;; not create .#filename
    #+END_SRC

*** set org agenda file
    #+BEGIN_SRC elisp
      (setq org-agenda-files (list "~/documents/org"))
    #+END_SRC

*** set line high light
    #+BEGIN_SRC elisp
      (global-hl-line-mode 1)
    #+END_SRC

*** set not indent tab
    #+BEGIN_SRC elisp
      (setq-default indent-tabs-mode nil)
    #+END_SRC

*** 自动扩展块模板
    <s + Tab 无法扩展成块模板
    #+begin_src elisp
      (when (version<= "9.2" (org-version))
        (require 'org-tempo))
    #+end_src

*** 自动折行
    设置 ~toggle-truncate-lines~ 变量即可。
    但是 ~org-mode~ 需要单独设置，因为每次进入 ~org-mode~ 的时候，这个变量都会重设
    #+begin_src elisp
      (setq toggle-truncate-lines t)
      (add-hook 'org-mode-hook 'toggle-truncate-lines)
    #+end_src
    
*** line numbers
    #+begin_src elisp
      (add-hook 'prog-mode-hook #'display-line-numbers-mode)
    #+end_src    
*** tangle file after save
    每次保存文件以后自动 tangle file
    <2021-04-26 一> 所有的文件在保存之后都会调用 =org-babel-tangle=. 去掉这个功能
    #+begin_src elisp :tangle no
      (add-hook 'after-save-hook #'org-babel-tangle)
    #+end_src
*** record emacs start time
    记录 emacs 启动时间
    #+begin_src elisp :tangle no
      ;; Use a hook so the message doesn't get clobbered by other messages.
      (add-hook 'emacs-startup-hook
          (lambda ()
              (message "Emacs ready in %s with %d garbage collections."
                  (format "%.2f seconds"
                      (float-time
                          (time-subtract after-init-time before-init-time)))
              gcs-done)))
    #+end_src

    使用 =ESUP= 包来记录启动时间
    #+begin_src elisp :tangle no
      (use-package esup
        :ensure t
        :pin melpa)
    #+end_src
** packages
*** use-package
    use-package is the basic of packages
    这个包需要手动安装
    #+begin_src elisp
      ;; This is only needed once, near the top of the file
      (eval-when-compile
        (require 'use-package))
    #+end_src
*** org-roam
    #+begin_src elisp
      (use-package org-roam
        :ensure t
        :custom (org-roam-directory "~/documents/org")
        :hook (after-init . org-roam-mode)
        :diminish)
    #+end_src
*** diminish
    不在 mode-line 里面显示 mode 的名字. [[https://github.com/myrjola/diminish.el][diminish gthub address]]
    #+begin_src elisp
      (use-package diminish
        :ensure t
        :config
        (diminish 'eldoc-mode)
        (diminish 'abbrev-mode))
    #+end_src
    
*** eshell
    针对 eshell 做一些个性化的配置
    #+begin_src elisp
      (use-package eshell
        :config
        (setq eshell-scroll-to-bottom-on-input t)
        :commands eshell)
    #+end_src
    
*** recentf
    #+begin_src elisp
      (use-package recentf
        :init
        (recentf-mode 1)
        :defer 1)
    #+end_src
*** ivy, swip
    使用 ~ivy-mode 1~ 就可以打开大部分的 ~ivy~ 命令支持
    :bind 可以绑定多个命令, 使用 :bind (("key" . command) ("key2" . command2))
    <2021-04-27 二> 尝试使用 consult 配合 selectrum
    #+begin_src elisp :tangle no
      (use-package counsel
        :ensure t
        :init (ivy-mode 1)
        :bind (("C-x r" . 'counsel-recentf)
               ("C-s" . swiper)))
    #+end_src

    尝试不在 mode line 显示 ivy
    #+begin_src elisp :tangle no
      (use-package ivy
        :ensure t
        :diminish)
    #+end_src
    
*** selectrum
    selectrum 和 ivy 的功能有些重复. 如果使用了 selectrum 就不要使用 ivy
    selectrum 可以将 **候选的内容排序**. 常用的候选项目, 比如 =M-x= 候选命令, =find-file= 显示的候选文件, 都会按照频率来进行排序.

    <2021-04-26 一> 尝试使用 =selecrrum= 可以通过使用频率排序候选
    <2021-04-26 一> 切换回 consunel 了. selectrum 没有 recent file 和 swiper
    <2021-04-27 二> 尝试使用 consult 配合 selectrum
    #+begin_src elisp
      (use-package selectrum
        :ensure t
        :init (selectrum-mode t)
        :defer t)
    #+end_src

    使用 selectrum-prescient 排序候选项目
    #+begin_src elisp
      (use-package selectrum-prescient
        :ensure t
        :init
        (selectrum-prescient-mode +1)
        (prescient-persist-mode +1)
        :after (selectrum))
    #+end_src
    
**** consult
     提供了很多方便的从候选列表里面选择内容的函数, [[https://github.com/minad/consult#available-commands][github]]
     #+begin_src elisp
       (use-package consult
         :ensure t
         :init
         (setq register-preview-delay 0
               register-preview-function #'consult-register-format)
         (advice-add #'register-preview :override #'consult-register-window)
         (setq xref-show-xrefs-function #'consult-xref
               xref-show-definitions-function #'consult-xref)
         :bind (("C-x r" . consult-recent-file)
                ("C-x b" . consult-buffer)
                ("C-s" . consult-line))
         :config
         (autoload 'projectile-project-root "projectile")
         (setq consult-project-root-function #'projectile-project-root))
     #+end_src

     =recentf-mode= 必须开启, 不然 =consult= 的 recent-file 不可以使用

*** helm
    #+begin_src elisp :tangle no
      (use-package helm
        :ensure t
        :bind
        (:map global-map
              ("M-x" . helm-M-x)
              ("C-x r" . helm-recentf)
              ("C-x b" . helm-buffers-list)))
    #+end_src
*** projectile
    =projectile= 制定一个目录, 在里面根据一定的规则查找项目
    #+begin_src elisp
      (use-package projectile
        :ensure t
        :diminish projectile-mode
        :bind ("C-c p" . projectile-command-map)
        :defer 2
        :init
        (projectile-mode +1)
        (setq projectile-project-search-path '("~/workspace/")))
    #+end_src
*** treemacs
    文件浏览窗口
    #+begin_src elisp
      (use-package treemacs
        :ensure t
        :defer t
        :config
        (progn
          (treemacs-resize-icons 18)
          (treemacs-follow-mode t)
          (treemacs-filewatch-mode t)
          (treemacs-fringe-indicator-mode 'always))
        :bind
        (:map global-map
              ("C-x t t" . treemacs)
              ("C-x t 1" . treemacs-delete-other-windows)
              ("C-x t C-t" . treemacs-find-file)))
    #+end_src
**** treemacs projectile
     #+begin_src elisp
       (use-package treemacs-projectile
         :ensure t
         :after (treemacs projectile))
     #+end_src
**** treemacs magit
     #+begin_src elisp
       (use-package treemacs-magit
         :ensure t
         :after (treemacs magit))
     #+end_src
*** rainbow delimiters
    彩虹括号 [[https://github.com/Fanael/rainbow-delimiters][github]]
    #+begin_src elisp
      (use-package rainbow-delimiters
        :ensure t
        :diminish
        :hook (prog-mode . rainbow-delimiters-mode))
    #+end_src
*** which key
    提示按键, [[https://github.com/justbur/emacs-which-key][github]]
    设置了显示帮助信息的延迟时间 *0.3* 秒
    which-key 和 hydra 对比
    #+begin_src elisp
      (use-package which-key
        :ensure t
        :init (which-key-mode)
        :diminish
        :config (setq which-key-idle-delay 0.3)
        :defer t)
    #+end_src
*** avy
    实现类似于 vim 上 easymotion 效果的包, 可以快速跳转到指定的字符和行数
    使用 =C-c c= 快捷键来跳转字符
    #+begin_src elisp
      (use-package avy
        :ensure t
        :bind
        ("C-c c c" . avy-goto-char)
        ("C-c c b" . avy-goto-char-2)
        ("C-c c f" . avy-goto-char-timer)
        ("C-c c l" . avy-goto-line))
    #+end_src
*** expand region
    #+begin_src elisp
      (use-package expand-region
        :ensure t
        :bind ("C-=" . er/expand-region))
    #+end_src
*** smart parens
    智能括号补全
    可以使用 =sp-cheat-sheet= 查看自带的帮助.
    <2021-07-07 三> 使用 paredit 替换
    #+begin_src elisp :tangle no
      (use-package smartparens
        :ensure t
        :diminish
        :bind
        ("C-c s r" . sp-rewrap-sexp)
        ("C-c s f" . sp-forward-slurp-sexp)
        ("C-c s b" . sp-backward-slurp-sexp)
        ("C-c s a" . sp-add-to-next-sexp)
        :hook (prog-mode . smartparens-mode)
        :defer t)
    #+end_src
*** paredit
    #+begin_src elisp
          (use-package paredit
            :ensure t
            :diminish
            :hook (prog-mode . paredit-mode))
    #+end_src
*** themes
**** all the icons
     有了这个包以后可以显示图标, [[https://github.com/domtronn/all-the-icons.el][github]]. *注意, 需要手动执行 all-the-icons-install-fonts 安装图标字体文件*
     #+begin_src elisp
       (use-package all-the-icons
         :ensure t)
     #+end_src
**** doom themes
     大量! 好看的! 主题
     #+begin_src elisp
       (use-package doom-themes
         :ensure t
         :config
         (setq doom-themes-enable-bold t
               doom-themes-enable-italic t)
         (load-theme 'doom-zenburn t))
     #+end_src
*** develop
**** yasnippet
     不使用这个包, 代码补全有问题, 会出现 $0, $1 这样的占位符
     #+begin_src elisp
       (use-package yasnippet
         :ensure t
         :hook (prog-mode . (lambda () (yas-reload-all) (yas-minor-mode)))
         :commands (yas-reload-all)
         :diminish)
     #+end_src
**** restclient
     使用 restclient.el 方便的进行接口的测试
     #+begin_quote
     C-c C-c: runs the query under the cursor, tries to pretty-print the response (if possible)
     C-c C-r: same, but doesn't do anything with the response, just shows the buffer
     C-c C-v: same as C-c C-c, but doesn't switch focus to other window
     C-c C-p: jump to the previous query
     C-c C-n: jump to the next query
     C-c C-.: mark the query under the cursor
     C-c C-u: copy query under the cursor as a curl command
     C-c C-g: start a helm session with sources for variables and requests (if helm is available, of course)
     C-c n n: narrow to region of current request (including headers)
     TAB: hide/show current request body, only if
     C-c C-a: show all collapsed regions
     C-c C-i: show information on resclient variables at point
     #+end_quote

     #+begin_src restclient
       # -*- restclient -*-
       #
       # Gets  all Github APIs, formats JSON, shows response status and headers underneath.
       # Also sends a User-Agent header, because the Github API requires this.
       #
       GET https://api.github.com
       User-Agent: Emacs Restclient

       #
       # XML is supported - highlight, pretty-print
       #
       GET http://www.redmine.org/issues.xml?limit=10

       #
       # It can even show an image!
       #
       GET http://upload.wikimedia.org/wikipedia/commons/6/63/Wikipedia-logo.png
       #
       # A bit of json GET, you can pass headers too
       #
       GET http://jira.atlassian.com/rest/api/latest/issue/JRA-9
       User-Agent: Emacs24
       Accept-Encoding: compress, gzip

       #
       # Post works too, entity just goes after an empty line. Same is for PUT.
       #
       POST https://jira.atlassian.com/rest/api/2/search
       Content-Type: application/json

       {
               "jql": "project = HCPUB",
               "startAt": 0,
               "maxResults": 15,
               "fields": [
                       "summary",
                       "status",
                       "assignee"
               ]
       }
       #
       # And delete, will return not-found error...
       #
       DELETE https://jira.atlassian.com/rest/api/2/version/20

       # Set a variable to the value of your ip address using a jq expression
       GET http://httpbin.org/ip
       -> jq-set-var :my-ip .origin
     #+end_src
 

     #+begin_src elisp
       (use-package restclient
         :ensure t)
     #+end_src
**** docker intergration
     [[https://github.com/Silex/docker.el][docker.el]] 在 ~emacs~ 里面集成 ~docker~
     #+begin_src elisp
       (use-package docker
         :ensure t
         :bind ("C-c d" . docker))
     #+end_src
**** lsp lauguage server protocol
     设置 ~lsp-deferred~ , 如果不希望 ~LSP server~ 立刻启动
     ~lsp~ 的性能优化. 根据[[https://emacs-lsp.github.io/lsp-mode/page/performance/\\][官方文档]]的内容, ~gc-cons-threshold~ 这个变量会极大的影响性能
     可以使用 ~lsp doctor~ 命令查看当前 ~lsp server~ 配置的优化建议
     [[https://emacs-lsp.github.io/lsp-mode/page/installation/][安装官方文档]]
     #+begin_src elisp
       (use-package lsp-mode
         :ensure t
         :init
         (setq gc-cons-threshold (* 1 100 1024 1024))
         (setq read-process-output-max (* 1024 1024))
         :commands (lsp lsp-deferred)
         :init (setq lsp-keymap-prefix "C-c l")
         :config (lsp-enable-which-key-integration t))
     #+end_src
***** lsp-ui [[https://emacs-lsp.github.io/lsp-ui/][官方网站]].
     =lsp ui= 提供了 =lsp-mode= 界面上的支持. 比如 =flycheck=, =code lenses=.
     一般来说, =lsp-mode= 自动启用 =lsp-ui= 除非 =lsp-auto-config= 设置成 nil.
     #+begin_src elisp
       (use-package lsp-ui
         :ensure t
         :init (setq lsp-ui-doc-position 'bottom)
         :hook ((lsp-mode . lsp-ui-mode)
                (lsp-mode . lsp-enable-which-key-integration)))
     #+end_src

***** dap
      用来 debugger 的
      [[https://github.com/emacs-lsp/dap-mode][dap github]]
      #+begin_src elisp
        (use-package dap-mode
          :ensure t
          :after lsp-mode
          :config (dap-auto-configure-mode))
      #+end_src
***** lsp treemasc
      可以漂亮的显示当前 =buffer= 的 =symbols=, =errors=, =warrnings= 等等信息
      显示文件 symbol 的效果比 =lsp-ui imenu= 好很多
      #+begin_src elisp
        (use-package lsp-treemacs
          :ensure t
          :after (lsp-deferred))
      #+end_src
     
     
     在单独的开发语言配置中, 可以直接设置 :hook 来启动 ~lsp~
     比如
     #+begin_src elisp :tangle no
       (use-package ...
          ...
         :hook (xxx-mode . lsp-deferred)
         ...)
     #+end_src
     
***** lsp ivy
      可以快速的在 symbols 中跳转.
      如果想要跳转到任何 functons, vars 或者别的 symbols, 可以使用 =ivy-workspace-symbol= 命令
      使用了 =selectrum= 和 =consult= 所以不需要这个包了
      #+begin_src elisp :tangle no
        (use-package lsp-ivy
          :ensure t)
      #+end_src      
**** git
     使用 [[https://magit.vc/][magit]] 包
     #+begin_src elisp
       (use-package magit
         :ensure t
         :commands magit-status)
     #+end_src
**** Company 自动完成
     配置自动完成的功能, 自动完成只在启动了 lsp 的 buffer 中启动
     #+begin_src elisp
       (use-package company
         :diminish
         :ensure t
         :hook ((lsp-mode . company-mode)
                (prog-mode . company-mode))
         :bind
         (:map company-active-map
               ("<tab>" . company-complete-selection))
         (:map lsp-mode-map
               ("<tab>" . company-indent-or-complete-common))
         :custom
         (company-minimum-prefix-length 1)
         (company-idle-delay 0.0))

       (use-package company-box
         :ensure t
         :diminish
         :hook (company-mode . company-box-mode))

     #+end_src
**** flycheck
     检查语法错误等 [[https://www.flycheck.org/en/latest/user/installation.html#use-package][offical website]]
     #+begin_src elisp
       (use-package flycheck
         :ensure t
         :hook (prog-mode . flycheck-mode)
         :diminish)
     #+end_src
**** Python
     配置 python 开发环境, lsp 后端使用微软的 lsp client. [[https://github.com/Microsoft/python-language-server][微软 python language server 主页]]
     微软的 python lsp server 使用非常简单, 可以自动安装
     启动 python mode 以后, require lsp-python-ms, 启动 lsp.
     #+begin_src elisp
       (use-package lsp-python-ms
         :ensure t
         :init (setq lsp-python-ms-auto-install-server t)
         :hook (python-mode . (lambda ()
                                (require 'lsp-python-ms)
                                (lsp-deferred))))
     #+end_src
***** poetry
      [[https://python-poetry.org/][Poetry]] 是一个用于 ~python~ 项目管理的软件, 类似于 ~npm~
      [[https://github.com/galaunay/poetry.el][peotry emacs]] 在 ~emacs~ 里面管理运行 ~poetry~ 命令
      #+begin_src elisp
        (use-package poetry
          :ensure t
          :commands (poetry-tracking-mode)
          :init (poetry-tracking-mode))
      #+end_src
**** javascript
***** COMMENT [[https://github.com/NicolasPetton/Indium][javascript ide Indium]]. 支持 repl(nodejs, chromium tab), scratch buffer 等等特性
****** Install
       =npm install -g indium= 安装 server.
       =package-install indium= 安装 emacs package.
****** Usage
       在项目的根目录下放置 =indium.json= 文件. 文件里面可以配置许多选项,具体看[[https://indium.readthedocs.io/en/latest/setup.html][这篇文档]]
****** Starting Indium
       =indium-connect= 连接一个正在运行的 node 或者浏览器进程
       =inidum-launch= 开启新的进程
       #+begin_src elisp :tangle no
         (use-package indium
           :ensure t
           :mode "\\.js\\'")
       #+end_src
***** js2mode & skewer

      skewer 提供了在浏览器里面运行和调试代码的能力.
      使用 =run-skewer= 命令会显示一个浏览器窗口, 并启动一个进程和这个浏览器连接, 可以把当前的代码发送到浏览器里面运行.
      - =C-c C-k= :: send-buffer
      - =C-c C-c= :: send-last-sexp
      
      #+begin_src elisp
        (use-package js2-mode
          :ensure t
          :config (lsp-deferred)
          :mode ("\\.[mc]*js\\'")
          :hook (js2-mode . lsp-deferred)
          :custom (js-indent-level 2))
      #+end_src

      #+begin_src elisp
        (use-package skewer-mode
          :ensure t
          :commands (run-skewer))
      #+end_src

      [[https://github.com/js-emacs/js2-refactor.el][js2-refactor]] 提供了一些很好用的函数, 需要配合 =js2-mode= '
      (js2r-add-keybindings-with-prefix "C-c C-m") 设置按键绑定
      #+begin_src elisp
        (use-package js2-refactor
          :ensure t
          :diminish
          :hook (js2-mode . js2-refactor-mode)
          :bind (:map js2-mode-map
                      ("C-k" . js2r-kill))
          :config (js2r-add-keybindings-with-prefix "C-c C-m"))
      #+end_src
***** nodejs
      使用 [[https://github.com/redguardtoo/js-comint][js-comint]] 开发 nodejs.
      #+begin_src elisp
        (use-package js-comint
          :ensure t
          :commands (run-js)
          :bind (:map js2-mode-map
                      ("C-c C-c" . js-comint-send-last-sexp)
                      ("C-c C-k" . js-comint-send-buffer)
                      ("C-c r" . js-comint-reset-repl)
                      ("C-c C-l" . js-comint-clear)))
      #+end_src
***** web-mode
      web-mode 用来开发 html, 各种模板
      #+begin_src elisp
        (use-package web-mode
          :ensure t
          :mode "\\.html?\\'")
      #+end_src
***** jsx
      [[https://github.com/felipeochoa/rjsx-mode][rjsx-mode]] 编辑 react 的 jsx 文件.
      输入 < 符号以后会自动生成 </> . 继续输入 > 符号或者 C-d 可以补全关闭括号
      #+begin_src elisp
        (use-package rjsx-mode
          :ensure t
          :mode ("\\.[jt]sx\\'")
          :config (lsp-deferred))
      #+end_src
***** prettier
      美化代码
      #+begin_src elisp
        (use-package prettier-js
          :ensure t
          :diminish
          :hook ((js2-mode . prettier-js-mode)
                 (web-work-mode . prettier-js-mode)
                 (typescript-mode . prettier-js-mode)))
      #+end_src
**** typescript
     #+begin_src elisp
       (use-package typescript-mode
         :ensure t
         :hook (typescript-mode . lsp-deferred)
         :custom (typescript-indent-level 2))
     #+end_src
**** java
     [[https://emacs-lsp.github.io/lsp-java/][lsp java]], lsp java 使用 [[https://projects.eclipse.org/projects/eclipse.jdt.ls][eclipse jdt language server]].
     提供了 maven 项目的支持. 但是对 gradle 只有
     #+begin_quote
     limit support
     #+end_quote

     对 =spring= 项目有实验性的支持
     
     #+begin_src elisp
       (use-package lsp-java
         :ensure t
         :hook (java-mode . (lambda ()
                                    (require 'lsp-java)
                                    (lsp-deferred)))
         :config
         (lambda ()
           (require 'lsp-java-boot
                    (add-hook 'lsp-mode-hook #'lsp-lens-mode)
                    (add-hook 'java-mode-hook #'lsp-java-boot-lens-mode))))
     #+end_src

     #+begin_src elisp
       (use-package dap-java
         :ensure nil)

       (use-package dap-mode :after lsp-mode :config (dap-auto-configure-mode))
     #+end_src
**** groovy
     只安装 =groovy-mode= , 目前的需求只是写 =gradle=, 所以不许要安装 lsp
     #+begin_src elisp
       (use-package groovy-mode
         :ensure t
         :mode "\\.gradle\\'")
     #+end_src
**** xonsh
     =xonsh= 是一个集合了 =python= 和 =shell= 的, 可以方便的开发脚本的软件
     #+begin_src elisp
       (use-package xonsh-mode
         :ensure t)
     #+end_src
**** lua
     #+begin_src elisp
       (use-package lua-mode
         :ensure t
         :mode "\\.lua\\'")
     #+end_src
**** clojure && clojurescript
     [[https://docs.cider.mx/cider/basics/installation.html][cider]] 提供了很多方便的功能, 是 ~emacs~ 上开发 clojure 和 clojurescript 的不二之选
     #+begin_src elisp
       (use-package cider
         :ensure t
         :config (global-set-key (kbd "TAB") #'company-indent-or-complete-common))
     #+end_src

     [[https://github.com/borkdude/flycheck-clj-kondo][clj-kondo]] 提供了提示代码错误， =linter= 功能，不需要启动 =repl=
     #+begin_src elisp
       (use-package flycheck-clj-kondo
         :ensure t)

       (use-package clojure-mode
         :ensure t
         :config
         (require 'flycheck-clj-kondo))
     #+end_src
** Chinese
   中文相关的设置, 字体, 输入法等等
   
   #+begin_src elisp
     (use-package cnfonts
       :ensure t
       :init (cnfonts-enable))
   #+end_src
*** 输入法
    输入法使用[[https://github.com/DogLooksGood/emacs-rime][狗哥的 rime 输入法]]
    #+begin_src elisp
      (use-package rime
        :ensure t
        :custom
        (default-input-method "rime")
        :commands rime
        :init
        (setq rime-user-data-dir "~/.local/share/fcitx5/rime/")
        :config
        (setq rime-disable-predicates
              '(rime-predicate-ace-window-p
                rime-predicate-after-alphabet-char-p
                rime-predicate-prog-in-code-p
                rime-predicate-current-input-punctuation-p ; 需要输入符号
                rime-predicate-punctuation-after-space-cc-p ; 空格以后需要输入符号
                rime-predicate-space-after-ascii-p ; 英文字符且有空格后
                rime-predicate-space-after-cc-p ; 中文字符且有空格后
                rime-predicate-current-uppercase-letter-p ; 需要输入大写英文后
                )
              rime-inline-ascii-trigger 'shift-l)
        :bind
        (:map rime-active-mode-map
              ("M-j" . rime-inline-ascii))
        (:map rime-mode-map
              ("M-j" . rime-force-enable)))
    #+end_src

* Local Variables
Local Variables:
eval: (add-hook 'after-save-hook #'org-babel-tangle)
End:
