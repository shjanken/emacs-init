#+title: Emacs init file
#+STARTUP: hidestars
#+STARTUP: overview
#+roam_alias: "emasc init file"
#+property: header-args:elisp :tangle ~/.emacs.d/init.el

this init file install package with =user-package= and =straight=.
Some package is in the github.

- tags :: dotfile, [[file:../linux.org][Linux]]

* emacs init file
  :PROPERTIES:
  :header-args:elisp: :tangle ~/.emacs.d/init.el
  :END:

** my functions
   #+BEGIN_SRC elisp
     (defun set-mark-and-show-message (arg)
       "Run set mark command and show a message"
       (interactive "P")
       (message "Set Marked!")
       (set-mark-command arg))

     (defun show-all-buffers-with-file
	 ()
       (interactive)
       (list-buffers 1))

     (global-set-key (kbd "<f7>") 'show-all-buffers-with-file)
     (global-set-key (kbd "<f2>") 'set-mark-and-show-message)
   #+END_SRC

   关闭 =emacs= 的 "dududu" 的报警声音 
   #+BEGIN_SRC elisp
     (setq visible-bell nil)
     (setq ring-bell-function 'ignore)
   #+END_SRC
   
   使用 =ibuffer= 代替 =bufferlist=
   #+BEGIN_SRC elisp
     (global-set-key (kbd "C-x C-b") 'ibuffer)
   #+END_SRC

** use mepal package reposity
   #+BEGIN_SRC elisp
     (require 'package) ;; You might already have this line
     (setq package-archives '(("gnu"   . "http://elpa.emacs-china.org/gnu/")
                              ("melpa" . "http://elpa.emacs-china.org/melpa/")))
     ;; (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
     (package-initialize)
   #+END_SRC

   *use customize replaced!*

   <2017-07-12>
   use emacs china elpa mirrow

** install package manager
   #+BEGIN_SRC elisp
     (defvar bootstrap-version)
     (let ((bootstrap-file
            (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
           (bootstrap-version 5))
       (unless (file-exists-p bootstrap-file)
         (with-current-buffer
             (url-retrieve-synchronously
              "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
              'silent 'inhibit-cookies)
           (goto-char (point-max))
           (eval-print-last-sexp)))
       (load bootstrap-file nil 'nomessage))
   #+END_SRC

** my default setting
*** set my default directory when emacs start
    #+BEGIN_SRC elisp
      (setq command-line-default-directory "~/")
      (setq default-directory "~/")
      (scroll-bar-mode -1) ; disable scroll bar
      (tool-bar-mode -1) ; disable tool bar
      (show-paren-mode) ; hight light match parens
      (setq inhibit-startup-screen t)
    #+END_SRC
*** org mode
**** set babel execute language
     设置 ~org babel~ 代码块里面可以运行的语言
     #+BEGIN_SRC elisp
       (org-babel-do-load-languages
        'org-babel-load-languages '((clojure . t)
                                    (emacs-lisp . t)
                                    (ditaa . t)
                                    (shell . t)
                                    (js . t)))

       (setq org-confirm-babel-evaluate nil)
     #+END_SRC

*** set no auto backup
    disable auto backup. ( backup~ & #autobackup#)
    #+BEGIN_SRC elisp
      (setq make-backup-files nil)
      (setq auto-save-default nil)
    #+END_SRC

*** set org agenda file
    #+BEGIN_SRC elisp
      (setq org-agenda-files (list "~/documents/org"))
    #+END_SRC

*** set line high light
    #+BEGIN_SRC elisp
      (global-hl-line-mode 1)
    #+END_SRC

*** set not indent tab
    #+BEGIN_SRC elisp
      (setq-default indent-tabs-mode nil)
    #+END_SRC

*** 自动扩展块模板
    <s + Tab 无法扩展成块模板
    #+begin_src elisp
      (when (version<= "9.2" (org-version))
        (require 'org-tempo))
    #+end_src

*** 自动折行
    设置 ~toggle-truncate-lines~ 变量即可。
    但是 ~org-mode~ 需要单独设置，因为每次进入 ~org-mode~ 的时候，这个变量都会重设
    #+begin_src elisp
      (setq toggle-truncate-lines t)
      (add-hook 'org-mode-hook 'toggle-truncate-lines)
    #+end_src
    
*** line numbers
    #+begin_src elisp
      (add-hook 'prog-mode-hook #'display-line-numbers-mode)
    #+end_src    
*** tangle file after save
    每次保存文件以后自动 tangle file
    #+begin_src elisp
      (add-hook 'after-save-hook #'org-babel-tangle)
    #+end_src
** packages
   
*** use-package
    use-package is the basic of packages
    这个包需要手动安装
    #+begin_src elisp
      ;; This is only needed once, near the top of the file
      (eval-when-compile
        (require 'use-package))
    #+end_src
    
*** diminish
    不在 mode-line 里面显示 mode 的名字. [[https://github.com/myrjola/diminish.el][diminish gthub address]]
    #+begin_src elisp
      (use-package diminish
        :ensure t)
    #+end_src
    
*** ivy, swip
    使用 ~ivy-mode 1~ 就可以打开大部分的 ~ivy~ 命令支持
    :bind 可以绑定多个命令, 使用 :bind (("key" . command) ("key2" . command2))
    #+begin_src elisp
      (use-package counsel
        :ensure t
        :init (ivy-mode 1)
        :bind (("C-x r" . 'counsel-recentf)
               ("C-s" . swiper)))
    #+end_src

    尝试不在 mode line 显示 ivy
    #+begin_src elisp
      (use-package ivy
        :ensure t
        :diminish)
    #+end_src
    
*** rainbow delimiters
    彩虹括号 [[https://github.com/Fanael/rainbow-delimiters][github]]
    #+begin_src elisp
      (use-package rainbow-delimiters
        :ensure t
        :diminish
        :hook (prog-mode . rainbow-delimiters-mode))
    #+end_src
*** which key
    提示按键, [[https://github.com/justbur/emacs-which-key][github]]
    设置了显示帮助信息的延迟时间 *0.3* 秒
    which-key 和 hydra 对比
    #+begin_src elisp
      (use-package which-key
        :ensure t
        :init (which-key-mode)
        :diminish
        :config (setq which-key-idle-delay 0.3))
    #+end_src
