#+title: Emacs init file
#+STARTUP: hidestars
#+STARTUP: overview
#+roam_alias: "emasc init file"
this init file install package with =user-package= and =straight=.
Some package is in the github.

- tags :: dotfile, [[file:../linux.org][Linux]]

* emacs init file
  :PROPERTIES:
  :header-args:elisp: :tangle ~/.emacs.d/init.el
  :END:

** my functions
   #+BEGIN_SRC elisp
     (defun set-mark-and-show-message (arg)
       "Run set mark command and show a message"
       (interactive "P")
       (message "Set Marked!")
       (set-mark-command arg))

     (defun show-all-buffers-with-file
	 ()
       (interactive)
       (list-buffers 1))

     (global-set-key (kbd "<f7>") 'show-all-buffers-with-file)
     (global-set-key (kbd "<f2>") 'set-mark-and-show-message)
   #+END_SRC

   关闭 =emacs= 的 "dududu" 的报警声音 
   #+BEGIN_SRC elisp
     (setq visible-bell nil)
     (setq ring-bell-function 'ignore)
   #+END_SRC
   
   使用 =ibuffer= 代替 =bufferlist=
   #+BEGIN_SRC elisp
     (global-set-key (kbd "C-x C-b") 'ibuffer)
   #+END_SRC

** use mepal package reposity
   #+BEGIN_SRC elisp
     (require 'package) ;; You might already have this line
     (setq package-archives '(("gnu"   . "http://elpa.emacs-china.org/gnu/")
                              ("melpa" . "http://elpa.emacs-china.org/melpa/")))
     ;; (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
     (package-initialize)
   #+END_SRC

   *use customize replaced!*

   <2017-07-12>
   use emacs china elpa mirrow

** install package manager
   #+BEGIN_SRC elisp
     (defvar bootstrap-version)
     (let ((bootstrap-file
            (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
           (bootstrap-version 5))
       (unless (file-exists-p bootstrap-file)
         (with-current-buffer
             (url-retrieve-synchronously
              "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
              'silent 'inhibit-cookies)
           (goto-char (point-max))
           (eval-print-last-sexp)))
       (load bootstrap-file nil 'nomessage))
   #+END_SRC

** my default setting
*** set my default directory when emacs start
    #+BEGIN_SRC elisp
      (setq command-line-default-directory "~/")
      (setq default-directory "~/")
      (scroll-bar-mode -1) ; disable scroll bar
      (tool-bar-mode -1) ; disable tool bar
      (show-paren-mode) ; hight light match parens
      (setq inhibit-startup-screen t)
    #+END_SRC
*** org mode
**** set babel execute language
     设置 ~org babel~ 代码块里面可以运行的语言
     #+BEGIN_SRC elisp
       (org-babel-do-load-languages
        'org-babel-load-languages '((clojure . t)
                                    (emacs-lisp . t)
                                    (ditaa . t)
                                    (shell . t)
                                    (js . t)))

       (setq org-confirm-babel-evaluate nil)
     #+END_SRC

*** set no auto backup
    disable auto backup. ( backup~ & #autobackup#)
    #+BEGIN_SRC elisp
      (setq make-backup-files nil)
      (setq auto-save-default nil)
    #+END_SRC

*** set org agenda file
    #+BEGIN_SRC elisp
      (setq org-agenda-files (list "~/documents/org"))
    #+END_SRC

*** set line high light
    #+BEGIN_SRC elisp
      (global-hl-line-mode 1)
    #+END_SRC

*** set not indent tab
    #+BEGIN_SRC elisp
      (setq-default indent-tabs-mode nil)
    #+END_SRC

*** 自动扩展块模板
    <s + Tab 无法扩展成块模板
    #+begin_src elisp
      (when (version<= "9.2" (org-version))
        (require 'org-tempo))
    #+end_src

*** 自动折行
    设置 ~toggle-truncate-lines~ 变量即可。
    但是 ~org-mode~ 需要单独设置，因为每次进入 ~org-mode~ 的时候，这个变量都会重设
    #+begin_src elisp
      (setq toggle-truncate-lines t)
      (add-hook 'org-mode-hook 'toggle-truncate-lines)
    #+end_src
** emacs packages 
*** use-packages
    #+BEGIN_SRC elisp
      (straight-use-package 'use-package)
    #+END_SRC

*** Hydras
    hydras and example

    #+BEGIN_SRC elisp
      (use-package hydra
	:straight t
	:config
	(defhydra hydra-zoom (global-map "<f5>")
	  "zoom"
	  ("g" text-scale-increase "in")
	  ("l" text-scale-decrease "out")))
    #+END_SRC

*** centaur tabs                                                   :NOTANGLE:
    为了使用 icon 还是改回了 =awesome-tab=
    #+BEGIN_SRC elisp :tangle no
      (use-package centaur-tabs
	:ensure t
	:demand
	:config
	(centaur-tabs-mode t)
	(defhydra hydra-centaur
	  (global-map "C-c t")
	  "
      Press _n_ to next tab
      Press _p_ to previors tab
      Press _N_ to next tab group
      Press _P_ to previors tab group
      "
	  ("n" centaur-tabs-backward nil)
	  ("p" centaur-tabs-forward nil)
	  ("N" centaur-tabs-backward-group nil)
	  ("P" centaur-tabs-forward-group nil))
	(define-key global-map (kbd "C-c t") 'hydra-centaur/body))
    #+END_SRC

*** Ivy, Counsel, Swiper
    #+BEGIN_SRC elisp
      (use-package ivy
	:straight t
	:bind (("C-x b" . ivy-switch-buffer)))

      (use-package counsel
	:straight t
	:bind (("C-x C-f" . counsel-find-file)
	       ("M-x" . counsel-M-x)
	       ("C-h f" . counsel-describe-function)
	       ("<f1> l" . counsel-find-library)
	       ("C-x C-r" . counsel-recentf)))

      (use-package swiper
	:ensure t
	:bind (("C-s" . swiper)))
    #+END_SRC

*** my ewsw package
    #+BEGIN_SRC elisp
      (use-package ewsw
	:straight (ewsw :type git :host github :repo "shjanken/emacs-websocket-sucem")
	:init (use-package websocket :straight t)
	:config
	(defhydra hydra-sucem (global-map "C-c s")
	  "
      Press _s_ to search info.
      Press _d_ to delete the entry
      "
	  ("s" ewsw-send-cgylr-search nil)
	  ("d" ewsw-send-delete-yw nil)
	  ("r" ewsw-close-ewsw-buffer "close the ewsw buffer")
	  ("q" nil "quit"))

	(define-key global-map (kbd "C-c s") 'hydra-sucem/body))

    #+END_SRC

*** rainbow delimiters
    #+BEGIN_SRC elisp
      (use-package rainbow-delimiters
	:straight t
	:config
	(add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
    #+END_SRC

*** smart parens
    *我不能没有这个包*
    #+BEGIN_SRC elisp
      (use-package smartparens
	:straight t
	:config
	(add-hook 'prog-mode-hook #'smartparens-mode)
	(defhydra hydra-sp (prog-mode-map
			    "C-c p"
			    :pre (set-cursor-color "#40e0d0")
			    :post (set-cursor-color "#ffffff"))
	  "smart parens"
	  ("p" sp-splice-sexp "去表达式的括号")
	  ("r" sp-rewrapp-sex "修改括号")
	  ("f" sp-forward-slurp-sexp "向前吞掉一个表达式")
	  ("b" sp-forward-barf-sexp "收缩括号")))
    #+END_SRC

*** yasnippet
    #+BEGIN_SRC elisp
      (use-package yasnippet
        :ensure t
        :commands yas-minor-mode
        :hook (go-mode . yas-minor-mode))
    #+END_SRC
*** cursor movement 
    #+BEGIN_SRC elisp
      (defhydra hydra-move
	(global-map "<f4>")
	"movement"
	("w" forward-word "forward word")
	("b" backward-word "backward word")
	("s" forward-sexp "forward sexp")
	("B" backward-sexp "backward sexp"))

      (define-key global-map (kbd "<f4>") 'hydra-move/body)
    #+END_SRC

*** switch window
    use =other-window= function
    #+BEGIN_SRC elisp :tangle no
      (defhydra hydra-other-window
        (global-map "C-x")
        "switch window"
        ("o" other-window "switch to other _window_")
        ("O" other-frame "switch to other _frame_")
        ("1" delete-other-windows "delete other windows")
        ("q" nil "quit"))
    #+END_SRC

    <2019-12-05 Thu> use ace window replace 

*** ace jump
    快速跳转，字符，行，等等
    #+BEGIN_SRC elisp
      (use-package avy
	:straight t
	:config
	(defhydra hydra-ace-jump
	  (global-map "C-c c")
	  "ace-jump"
	  ("c" avy-goto-char "jump to char")
	  ("w" avy-goto-word-0 "jump to word")
	  ("l" avy-goto-line "jump to line qnumber")
	  ("t" avy-goto-char-timer "jump to char timer")
	  ("q" nil "quit"))

	(define-key global-map (kbd "C-c c") 'hydra-ace-jump/body))
    #+END_SRC

*** themes                                                         :NOTANGLE:
    #+BEGIN_SRC elisp :tangle no
      (use-package leuven-theme
        :ensure t
        :config
        (load-theme 'leuven t)
        ;; set neotree face.
        ;; neotree 淡色的上面太淡了
        (custom-set-faces
         '(neo-root-dir-face ((t (:foreground "dodger blue" :weight bold))))
         '(neo-file-link-face ((t (:foreground "lime green"))))
         '(neo-dir-link-face ((t (:foreground "SteelBlue4")))))
        )
    #+END_SRC


**** dracula                                                       :NOTANGLE:
    #+BEGIN_SRC elisp :tangle no
      (use-package dracula-theme
	:straight t
	:config
	(load-theme 'dracula t))
    #+END_SRC

**** solarized-theme                                               :NOTANGLE:
     #+BEGIN_SRC elisp :tangle no 
       (use-package solarized-theme
         :ensure t
         :config (load-theme 'solarized-light t))
     #+END_SRC

**** poet-theme                                                    :NOTANGLE:
     #+BEGIN_SRC elisp :tangle no
       (use-package poet-theme
         :ensure t
         :config
         (load-theme 'poet t)
         (add-hook 'text-mode-hook (lambda () (variable-pitch-mode 1))))
         ;; (set-face-attribute 'fixed-pitch nil :family "Inziu Iosevka SC") 
         ;;(set-face-attribute 'variable-pitch nil :family "Inziu Iosevka SC")
     #+END_SRC

**** Doneburn                                                      :NOTANGLE:
     #+BEGIN_SRC elisp :tangle no
       (use-package doneburn-theme
	 :ensure t
	 :config (load-theme 'doneburn 'no-confirm))
     #+END_SRC

**** Tao Theme                                                     :NOTANGLE:
     #+BEGIN_SRC elisp :tangle no
       (use-package tao-theme
         :ensure t
         :config (load-theme 'tao-yang 'no-confirm))
     #+END_SRC
**** Espresso                                                      :NOTANGLE:
     light theme
     #+BEGIN_SRC elisp :tangle no
       (use-package espresso-theme
         :ensure t
         :config (load-theme 'espresso 'no-confirm))
     #+END_SRC
**** srcery                                                        :NOTANGLE:
     一个黑色的主题, 比较好看
     #+begin_src elisp
       (use-package srcery-theme
         :ensure t
         :config (load-theme 'srcery t))
     #+end_src
*** moody                                                 :modeline:NOTANGLE:
    好看的 =mode-line= 样式
    [[https://github.com/tarsius/moody][github address]]
    #+BEGIN_SRC elisp :tangle no
      (use-package moody
	:straight t
	:config
	(moody-replace-mode-line-buffer-identification)
	(moody-replace-vc-mode))
    #+END_SRC

*** buffer manager
    #+BEGIN_SRC elisp
      (defhydra hydra-buffer
	(global-map "C-c b")
	"buffer operation"
	("b" ivy-switch-buffer "switch buffer")
	("B" list-buffers "list all buffers")
	("k" kill-buffer "kill current buffer")
	("q" nil "quit"))

      (define-key global-map (kbd "C-c b") 'hydra-buffer/body)
    #+END_SRC

*** expand-region    
 #+BEGIN_SRC elisp
       (use-package expand-region
	 :straight t
	 :commands (er/expand-region)
	 :bind
	 (("C-=" . er/expand-region)))
     #+END_SRC

*** cnfonts 
    #+BEGIN_SRC elisp
      (use-package cnfonts
	:ensure t
	:config
	(cnfonts-enable))

    #+END_SRC
*** development

**** autocomplete                                                  :NOTANGLE:
     #+BEGIN_SRC elisp :tangle no
       (use-package auto-complete
	 :straight t
	 :config
	 (add-hook 'prog-mode-hook #'auto-complete-mode))
     #+END_SRC

**** company
     auto complate
     #+BEGIN_SRC elisp
       (use-package company
         :ensure t
         :config
         ;; (add-hook 'prog-mode-hook #'company-)
         :hook ((prog-mode org-mode ejc-sql-minor-mode-hook) . company-mode))
     #+END_SRC

**** fly check

     #+BEGIN_SRC elisp
       (use-package flycheck
	 :ensure t
	 :init
	 (global-flycheck-mode))
     #+END_SRC

**** Languages
     
     config the lsp for simple luangage
     bulit in lsp-client
     #+BEGIN_SRC elisp
       (use-package lsp-mode
         :ensure t
         :commands (lsp lsp-deferred)
         :init
         (setq lsp-auto-guess-root t)

         :config
         (require 'lsp-clients)

         ;; install lsp-ui
         (use-package lsp-ui
           :ensure t
           :hook (lsp-mode . 'lsp-ui-mode)
           :config
           (defhydra hydra-lsp
             (global-map "C-c l")
             "lsp convinent"
             ("s" lsp-ui-sideline-mode "sidline mode"))
           (define-key global-map (kbd "C-c l") 'hydra-lsp/body))

         ;; intall company-lsp for complition
         (use-package company-lsp
           :ensure t
           :config
           (push 'company-lsp company-backends))
         )

       ;; (use-package lsp-treemacs
       ;;  :config
       ;;   (lsp-metals-treeview-enable t)
       ;;  (setq lsp-metals-treeview-show-when-views-received t))
     #+END_SRC

***** rust
      #+BEGIN_SRC elisp
	(use-package rust-mode
	  :ensure t
	  :config
	  (setq rust-format-on-save t)
	  (use-package cargo
	    :ensure t
	    :config
	    (add-hook 'rust-mode-hook 'cargo-minor-mode)

	    ;; set keybinding
	    (defhydra hydra-cargo
	      (rust-mode-map "C-c r")

	      "rust cargo"
	      ("t" cargo-process-test "run cargo test")
	      ("r" cargo-process-run "run project")
	      ("b" cargo-process-build "build project")
	      ("q" nil "quit"))
r
	    (define-key global-map (kbd "C-c r") 'hydra-cargo/body))
	  :mode "\\.rs\\'"
	  :interpreter "rust"
	  :hook (rust-mode . (lambda () (lsp) (flycheck-mode))))
      #+END_SRC

***** javascript
#+BEGIN_SRC elisp
  ;; (use-package js2-mode
  ;;   :straight t
  ;;   :config
  ;;   (add-hook 'js2-mode-hook #'js2-imenu-extras-mode)

  (use-package rjsx-mode
    :ensure t

    :config
    ;; install indium package
    (use-package indium
      :ensure t)
    (use-package company-tern
      :ensure t)
    (setq js2-mode-show-strict-warnings nil)

    ;; use lsp mode
    :hook (rjsx-mode . (lambda () (lsp)))

    :mode "\\.js[x]\\'")

  ;; use vue mode
  (use-package web-mode
    :ensure t
    :mode "\\.vue\\'"
    :hook emmet-mode
    :config
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2))

  (use-package emmet-mode
    :ensure t
    :config
    (add-hook 'sgml-mode-hook 'emmet-mode)
    (add-hook 'css-mode-hook 'emmet-mode))


#+END_SRC

***** clojure & clojurescript
      使用 =cider= 来作为 =clojure= 和 =cljs= 语言的开发工具
      设置 =org-babel-clojure-backend= 可以在 =org file= 里面支持 =clojure= 代码的运行
      #+BEGIN_SRC elisp
        (use-package cider
          :ensure t
          :init
          (setq org-babel-clojure-backend 'cider))
      #+END_SRC

****** Clojure & ClojureScript 的 lint 工具
       使用 =clj-kondo= 作为 =lint= 工具, 可以使用操作系统的包管理器安装
       - 在项目中集成 :: 需要在项目的根目录 (和 =project.clj, build.boot, deps.edn= 在同一个目录) 创建 =.clj-kondo= 目录. 这个目录用来缓存
         
       =flycheck-clj-kondo= 是一个使用 =flycheck= 调用 =clj-kondo= 的包. 在 =emacs= 里面提示错误

       #+begin_src elisp
         (use-package flycheck-clj-kondo
           :ensure t)

         (use-package clojure-mode
           :ensure t
           :config
           (require 'flycheck-clj-kondo))
       #+end_src
***** Elixir
      #+BEGIN_SRC elisp :tangle no
	(use-package alchemist
	  :ensure t
	  :mode "\\.(ex|exs)\\'"
	  :interpreter "elixir"
	  :config
	  (defhydra hydra-al
	    (elixir-mode-map "C-c a")

	    "
	_b_ eval this buffer
	"
	    ("b" alchemist-eval-buffer)
	    ("q" nil "quit"))
	  (define-key global-map (kbd "C-c a") 'hydra-al/body))
      #+END_SRC

      <2020-10-16 五> [[https://github.com/DogLooksGood/inf-iex][inf-iex]] 一个类似 =cider= 风格的 =iex= 插件
      =clojure= 群里的大佬开发

      install elixir mode first
      #+begin_src elisp
        (use-package elixir-mode
          :ensure t
          :mode "\\.(ex|exs)\\'"
          :interpreter "elixir")
      #+end_src
      
      #+begin_src elisp
        (use-package inf-iex
          :hook (elixir-mode . inf-iex-minor-mode)
          :straight (rime :type git
                          :host github
                          :repo "DogLooksGood/inf-iex"))
      #+end_src
***** Golang
      [[https://github.com/dominikh/go-mode.el][go-mode]]
      #+BEGIN_SRC elisp
        (use-package go-mode
          :mode "\\.go\\'"
          :ensure t
          :config
          (progn
            (defun lsp-go-install-save-hooks ()
              (add-hook 'before-save-hook #'lsp-format-buffer t t)
              (add-hook 'before-save-hook #'lsp-organize-imports))
            (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
            ;; (add-hook 'go-mode-hook #'lsp-ui-mode)
            )
          (lsp-deferred))
      #+END_SRC
      
***** typescript
      #+begin_src elisp
        (use-package tide
          :ensure t
          :after (typescript-mode company flycheck)
          :hook ((typescript-mode . tide-setup)
                 (typescript-mode . tide-hl-identifier-mode)
                 (before-save . tide-format-before-save)))
      #+end_src
***** scala                                                        :NOTANGLE:
      #+begin_src elisp :tangle no
        (use-package scala-mode
          :ensure t
          :mode "\\.s\\(cala\\|bt\\)$")

        (use-package sbt-mode
          :ensure t
          :config
          (substitute-key-definition
           'minibuffer-complete-word
           'self-insert-command
           minibuffer-local-completion-map)
          (setq sbt:program-options '(-Dsbt.supershell=false)))
      #+end_src
***** erlang
      ~erlang~ 使用 ~erlang-mode~ 来提供编写代码的能力
      #+begin_src elisp
        (use-package erlang
          :ensure t
          :interpreter ("erlang" . erlang-mode))
      #+end_src

      ob-erlang
      #+begin_src elisp
        (use-package ob-erlang
          :straight (ob-erlang :type git :host github :repo "xfwduke/ob-erlang"))

        (org-babel-do-load-languages 'org-babel-load-languages
                                     (append org-babel-load-languages '((erlang . t))))
      #+end_src
***** plantuml
      [2020-08-07 五]
      =plantuml= 是一个画图的软件
      [[https://www.yuque.com/barretlee/yuque/aabh67][绘制PlantUML图]]
      要使用 =plantuml= 需要现在系统里面安装, 可以使用官方的 =plantuml.jar=, 然后在 =emacs= 里面配置执行路径，如果是 =archlinux= 可以直接安装 =plantuml= 到系统里面, [[https://plantuml.com/zh/emacs][集成PlantUML到Emacs里面]]
      
      =plantuml.jar= 的安装位置在各个系统上都有不同，所以需要根据具体的位置来配置
      #+name: manjaro-plantuml-jar-path
      #+begin_src elisp :tangle no
      /usr/share/java/plantuml/plantuml.jar
      #+end_src
      
      #+begin_src elisp :noweb yes 
        (use-package plantuml-mode
          :init
          ; (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
          (org-babel-do-load-languages
           'org-babel-load-languages
           (append org-babel-load-languages '((plantuml . t))))
          (setq org-plantuml-jar-path (expand-file-name "<<manjaro-plantuml-jar-path>>"))
          :interpreter "plantuml")
      #+end_src
*** org-re-reveal
    提供导出为 =revealjs= 的功能.
    网页幻灯片
    [[https://melpa.org/#/org-re-reveal][melpa]]
    需要安装 =revealjs= 
    #+BEGIN_SRC elisp
      (use-package org-re-reveal
        :ensure t)
    #+END_SRC
*** pyim                                                           :NOTANGLE:
    <2020-10-16 五> 使用系统输入法代替, 但是在 =windows= 下使用 =wsl= 里面的 =emacs= 无法使用系统输入法( =windows= 下的输入法 ). 所以这个包还是需要的
    #+BEGIN_SRC elisp :tangle no
      (use-package pyim
        :ensure t
        :demand t
        :config
        (use-package pyim-basedict
          :ensure t
          :config (pyim-basedict-enable))
        (setq default-input-method "pyim")
        (setq pyim-default-scheme 'xiaohe-shuangpin)
        ;; 设置 pyim 探针设置，这是 pyim 高级功能设置，可以实现 *无痛* 中英文切换 :-)
        ;; 我自己使用的中英文动态切换规则是：
        ;; 1. 光标只有在注释里面时，才可以输入中文。
        ;; 2. 光标前是汉字字符时，才能输入中文。
        ;; 3. 使用 M-j 快捷键，强制将光标前的拼音字符串转换为中文。
        (setq-default pyim-english-input-switch-functions
                      '(pyim-probe-dynamic-english
                        pyim-probe-isearch-mode
                        pyim-probe-program-mode
                        pyim-probe-org-structure-template))

        (setq-default pyim-punctuation-half-width-functions
                      '(pyim-probe-punctuation-line-beginning
                        pyim-probe-punctuation-after-punctuation))
        (pyim-isearch-mode 1)         ;; 开启拼音搜索功能
        (setq pyim-page-tooltip 'popup)
        (setq pyim-page-length 5)         ;; 选词框显示5个候选词
        (setq pyim-punctuation-translate-p '(no yes auto)) ;; 使用半角标点

        (define-key org-mode-map (kbd "C-c C-p") 'pyim-convert-string-at-point))
    #+END_SRC
*** org-agenda
    #+BEGIN_SRC elisp
      (defhydra hydra-org
	(global-map "C-c o")
	"
	    Press _a_ to org-agenda
	    "
	("a" org-agenda nil))
      (define-key global-map (kbd "C-c o") 'hydra-org/body)
    #+END_SRC
*** All the icons
    [[https://github.com/domtronn/all-the-icons.el][github]]
    #+BEGIN_SRC elisp
      (use-package all-the-icons
	:ensure t)
    #+END_SRC

*** awesome-tab & projectile                                         :github:
    [[https://github.com/manateelazycat/awesome-tab][github address]]
    我非常喜欢的一个包. 在顶部显示相关的 tab

    <2019-07-10 三> 使用 [[https://github.com/ema2159/centaur-tabs/tree/c6c41b8542d300f4a5935adef3f280e1cb39f9f6][Centaur tabs]] 代替 awesome-tab

    #+BEGIN_SRC elisp
      ;; the tab dependency projectile package
      (use-package projectile
        :ensure t
        :config
        (projectile-mode +1)
        (defhydra hydra-projectile
          (global-map "C-c f")
          ""
          ("f" projectile-find-file "projectile find file")
          ("a" projectile-ag "projectile ag grep")
          ("p" projectile-switch-project "projectile switch project")
          ("b" projectile-ibuffer "projectile ibuffer")
          ("k" projectile-kill-buffers "projectile kill buffers")
          ("q" nil "quit"))
        (define-key global-map (kbd "C-c f") 'hydra-projectile/body)
        ;; ignore folder cli-kondo
        (add-to-list 'projectile-globally-ignored-directories ".clj-kondo")
        )
    #+END_SRC

    #+BEGIN_SRC elisp
      (use-package awesome-tab
        :straight (awesome-tab :type git :host github :repo "manateelazycat/awesome-tab")
        :config
        (awesome-tab-mode t)
        (setq awesome-tab-display-icon nil)
        (setq frame-background-mode 'dark))
    #+END_SRC
*** awesome-tray                                            :modeline:github:
    [[https://github.com/manateelazycat/awesome-tray][github address]]. not in the melpa
    #+BEGIN_SRC elisp :tangle no
      (use-package awesome-tray
	:straight (awesome-tray :type git :host github :repo "manateelazycat/awesome-tray")
	:config
	(awesome-tray-mode 1))
    #+END_SRC
*** indent-guide
    在代码前面显示一条缩进的线
    #+BEGIN_SRC elisp
      (use-package indent-guide
	:straight (indent-guide :type git :host github :repo "zk-phi/indent-guide")
	:config
	(indent-guide-global-mode))
    #+END_SRC
*** ditta
    #+BEGIN_SRC elisp
      (setq org-ditaa-jar-path "~/.local/share/ditaa/ditaa.jar") ; set the ditta lib path
    #+END_SRC
*** shortcuts                                                      :NOTANGLE:
    在 =buffer= 顶部显示切换 =buffer= 的快捷键
    每次窗口最大化以后, 顶部的快捷键栏会消失
    <2020-10-16 五> 使用 =awesometab= 以后, 就不需要这个包了
    #+BEGIN_SRC elisp :tangle no
      (use-package shortcuts
	:straight (shortcuts.el :type git :host github :repo "tetron/shortcuts.el"))
    #+END_SRC
*** neotree
    #+BEGIN_SRC elisp
      (use-package neotree
	:ensure t
	:config
	(defhydra hydra-neotree
	  (global-map "C-c t")
	  "
      Press _t_ to toggle neotree
      "
	  ("t" neotree-toggle))
	(define-key global-map (kbd "C-c t") 'hydra-neotree/body))
    #+END_SRC
*** restclient
    [[https://github.com/pashky/restclient.el][github]]
    #+BEGIN_SRC elisp
      (use-package restclient
	:ensure t)    
    #+END_SRC
*** beacon
    hight light current cursor
    #+BEGIN_SRC elisp
      (use-package beacon
        :ensure t
        :config
        (beacon-mode 1))
    #+END_SRC
*** ace window
    #+BEGIN_SRC elisp
      (use-package ace-window
        :ensure t
        :config
        (global-set-key (kbd "C-x o") 'ace-window))
    #+END_SRC

    <2019-12-05 Thu>
*** org-roam
    <2020-10-17 六> 尝试使用 =gkroam=
    [[https://github.com/jethrokuan/org-roam][github]] roam 是一个笔记系统.特点是无结构的文章组织,使用 =link= 的方式来组织笔记
    #+BEGIN_SRC elisp
      (use-package org-roam
        ;; :after org
        :hook (after-init . org-roam-mode)
        ;; :straight (:host github :repo "jethrokuan/org-roam")
        :ensure t
        :custom
        (org-roam-directory "~/documents/org/")
        ;; :commands (org-roam-today)
        :config
        (setq org-roam-capture-templates
              '(("d" "default" plain (function org-roam--capture-get-point)
                 "%?"
                 :file-name "${slug}"
                 :head "#+title: ${title}\n"
                 :unnarrowed t
                 :immediate-finish t)))
        (setq org-roam-completion-system 'ivy)
        (defhydra hydra-roam
          (org-mode-map "C-c n")

          "org roam key binding"
          ("l" org-roam "show side bar")
          ("f" org-roam-find-file "find file")
          ("i" org-roam-insert "insert here")
          ("t" org-roam-dailies-today "today"))
        (define-key org-mode-map (kbd "C-c n") 'hydra-roam/body))
    #+END_SRC

**** roam-company
     #+begin_src elisp
       (use-package company-org-roam
         :ensure t
         :config
         (push 'company-org-roam company-backends)
         :after org-roam)
     #+end_src
     
*** gkroam                                                         :NOTANGLE:
    =gkroam= 是一个轻量级的 =roam= 实现.
    可以使用 {[article]} 这样的语法. [[https://github.com/Kinneyzhang/gkroam][github]]
    <2020-10-18 日> gkroam 如何设置别名? 如何像 =org-roam= 一样是使用 =roam_alias= ?
    #+begin_src elisp :tangle no
      (use-package gkroam
	:ensure t
	:init
	(setq gkroam-root-dir "~/documents/org/")
	(setq gkroam-prettify-p t
	      gkroam-show-brackets-p t
	      gkroam-use-default-filename t
	      gkroma-window-margin 4)
	:config
	(defhydra hydra-gkroam-mode (org-mode-map "C-c n")
	  "gkroam keybidng"
	  ("I" gkroam-index "gkroam index")
	  ("d" gkroam-daily "gkroam daily")
	  ("f" gkroam-find "gkroam find")
	  ("i" gkroam-insert "gkroam insert")
	  ("c" gkroam-capture "gkroam capture")
	  ("e" gkroam-link-edit "gkroam link edit")
	  ("n" gkroam-smart-new "gkroam smart new")
	  ("p" gkroam-toggle-prettify "gkroam toggle prettify")
	  ("t" gkroam-toggle-brackets "gkroam toggle brachets")
	  ("D" gkroam-toggle-dynamic "gkroam toggle dynamic")
	  ("g" gkroam-update "gkroam update"))
	(define-key org-mode-map (kbd "C-c n") 'hydra-gkroam-mode/body))
    #+end_src
*** deft
    一个用来显示，过滤大量文件的库
    #+begin_src elisp
      (use-package deft
        :bind ("<f8>" . deft)
        :commands (deft)
        :config (setq deft-directory "~/documents/org"
                      deft-extensions '("md" "org" "txt"))
        :ensure t)
    #+end_src
*** remind-bindings                                                :NOTANGLE:
    提醒我当前我定义了哪些快捷键
    
    <2020-06-22 Mon>
    看起来不是很有用。而且造成了一个启动错误
    所以先把这个包去掉了

    #+BEGIN_SRC elisp :tangle no
      (use-package remind-bindings
        :ensure t
        :hook (after-init . remind-bindings-initialise)
        :bind (("C-c C-d" . 'remind-bindings-toggle-buffer)
               ("C-c M-d" . 'remind-bindings-specific-mode)))
    #+END_SRC
*** eaf                                                            :NOTANGLE:
    从官网上抄来的配置文件
    #+begin_src elisp :tangle no
      (use-package eaf
        :load-path "/usr/share/emacs/site-lisp/eaf"
        :custom
        (eaf-find-alternate-file-in-dired t)
        :config
        (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
        (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
        (eaf-bind-key take_photo "p" eaf-camera-keybinding))
    #+end_src
*** [[file:../ecj_sql.org][ejc sql]]
    ~ejc sql~ 是一个使用 ~clojure/java.jdbc~ 库来链接数据库的简单的 ~emacs sql client~

    #+begin_src elisp
      (use-package ejc-sql
        :ensure t
        :config
        (require 'ejc-company)
        (push 'ejc-company-backend company-backends)

        :init
        (setq ejc-temp-editor-file-path "/tmp"))
    #+end_src

    #+begin_src elisp
      (ejc-create-connection
       "test-db"
       :dependencies [[com.oracle.database.jdbc/ojdbc8 "19.7.0.0"]]
       :dbtype "oracle"
       :dbname "xe"
       :port "1521"
       :host "localhost"
       :user "system"
       :password "oracle"
       :separator "/")
    #+end_src

    #+RESULTS:
    | test-db | (:separator . /) | (:dependencies . [[com.oracle.jdbc/ojdbc6 11.0.0.0]]) | (:password . hr) | (:user . hr) | (:port . 1521) | (:host . localhost) | (:dbname . xe) | (:dbtype . oracle) |

*** org mode key bindings
     
     设置快捷键，使用 ~hydra~
     #+begin_src elisp
       (defhydra hydra-org-mode (org-mode-map "C-c o")
       "org map"
         ("f" org-metaright "headline right")
         ("b" org-metaleft "headline left")
         ("t" org-time-stamp "insert time stamp")
         ("a" org-time-stamp-inactive "insert inactive time stamp")
         ("u" org-time-stamp-up-day "up day")
         ("d" org-time-stamp-down-day "down day"))

       (define-key org-mode-map (kbd "C-c o") 'hydra-org-mode/body)
     #+end_src

     #+RESULTS:
     : hydra-org-mode/body
*** direnv
    [[https://github.com/wbolster/emacs-direnv][direnv github]]
    #+begin_src elisp
      (use-package direnv
        :ensure t
        :config
        (direnv-mode))
    #+end_src
*** org pdf and org noter                                          :NOTANGLE:
    安装 =pdf-tools=
    #+begin_src elisp :tangle no
      (use-package pdf-tools
        :ensure t
        :config
        (pdf-tools-install)
        (setq-default pdf-view-display-size 'fit-page)
        (setq pdf-annot-activate-created-annotations t))
    #+end_src
    
    使用 =org-pdftools= 来预览 =pdf= 文件
    =org-noter= 库可以将笔记和许多文件格式相关联, 同步. 比如 =pdf= =epub= =Microsoft Office= 等等 (需要配合 =DocView=, =Nov.el=) 等包 [[https://github.com/weirdNox/org-noter][github]]    
    =org-noter= 配合 =org-noter-pdftools= 包可以将笔记和 =pdf= 上下文关联起来.

    #+begin_src elisp :tangle no
      (use-package org-noter
        :ensure t
        :commands org-noter
        :init
        (setq org-noter-default-notes-file-names '("notes.org")
              org-noter-notes-search-path '("~/documents/org")))

      (use-package org-pdftools
        :ensure t
        :hook (org-mode . org-pdftools-setup-link)
        :config
        (pdf-tools-install))

      (use-package org-noter-pdftools
        :ensure t
        :after org-noter
        :config
        (with-eval-after-load 'pdf-annot
          (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
    #+end_src
*** emacs-load-env-vars
    载入一个 =env file=. [[https://github.com/diasjorge/emacs-load-env-vars][github]]
    #+begin_src elisp
      (use-package load-env-vars
        :ensure t
        :config (load-env-vars "~/.emacs.d/emacs.env"))
    #+end_src
