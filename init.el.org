* emacs init file
 :PROPERTIES:
  :header-args:elisp: :tangle ~/.emacs.d/init.el
  :END:      
** use mepal package reposity
   #+BEGIN_SRC elisp
     (require 'package) ;; You might already have this line
     (setq package-archives '(("gnu"   . "http://elpa.emacs-china.org/gnu/")
                              ("melpa" . "http://elpa.emacs-china.org/melpa/")))
     (package-initialize) 
   #+END_SRC

   use customize replaced!
   
   <2017-07-12>
   use emacs china elpa mirrow
   
** set code block highlight
   #+BEGIN_SRC elisp
     (setq org-confirm-babel-evaluate nil ; no confirm when C-c C-e
           org-src-fontify-natively t ; highlight code
           org-src-tab-acts-natively t)
   #+END_SRC

** install use-package 
   [[https://github.com/jwiegley/use-package][use-package]]
   #+BEGIN_SRC elisp
     (if (not (package-installed-p 'use-package))
         (progn
           (package-refresh-contents)
           (package-install 'use-package)))

     (require 'use-package)
     (setq use-package-verbose t)
   #+END_SRC

** install general
   #+BEGIN_SRC elisp
     (use-package general
       :ensure t
       :commands (general-define-key))
   #+END_SRC

** which-key
   #+BEGIN_SRC elisp
     (use-package which-key
       :ensure t 
       :commands (which-key-mode
                  which-key-setup-side-window-right)
       :init (which-key-setup-side-window-right))

     (which-key-mode)
   #+END_SRC
** Ivy, Counsel, Swiper
   #+BEGIN_SRC elisp
     (use-package ivy :ensure t
       :commands (ivy-mode
                  ivy-switch-buffer)
       :init (general-define-key
              "C-x b" '(ivy-switch-buffer :which-key "switch buffer")))

     (use-package counsel :ensure t
       :commands (counsel-find-file
                  counsel-ag
                  counsel-M-x
                  counsel-describe-function
                  counsel-find-library)
       :init (general-define-key
              "C-x C-f" 'counsel-find-file
              "C-c k" 'counsel-ag
              "M-x" 'counsel-M-x
              "C-h f" 'counsel-describe-function
              "<f1> l" 'counsel-find-library
              "C-x C-r" 'counsel-recentf))

     (use-package swiper
       :ensure t
       :commands (swiper)
       :init (general-define-key
              "C-s" 'swiper))
   #+END_SRC
** emacs windows number
   #+BEGIN_SRC elisp :tangle no
     (use-package winum
       :ensure t
       :commands (winum-mode)
       :config (general-define-key
                "C-x w" 'winum-select-window-by-number))
   #+END_SRC
** chinese piyin
   #+BEGIN_SRC elisp
     (use-package chinese-pyim
       :ensure t 
       :config
       ;; 激活 basedict 拼音词库
       (use-package chinese-pyim-greatdict
         :ensure t
         :config (chinese-pyim-greatdict-enable))

       ;; 五笔用户使用 wbdict 词库
       ;; (use-package chinese-pyim-wbdict
       ;;   :ensure nil
       ;;   :config (chinese-pyim-wbdict-gbk-enable))

       (setq default-input-method "chinese-pyim")

       ;; 我使用全拼
       (setq pyim-default-scheme 'quanpin)

       ;; 设置 pyim 探针设置，这是 pyim 高级功能设置，可以实现 *无痛* 中英文切换 :-)
       ;; 我自己使用的中英文动态切换规则是：
       ;; 1. 光标只有在注释里面时，才可以输入中文。
       ;; 2. 光标前是汉字字符时，才能输入中文。
       ;; 3. 使用 M-j 快捷键，强制将光标前的拼音字符串转换为中文。
       ;; (setq-default pyim-english-input-switch-functions
       ;;               '(pyim-probe-dynamic-english
       ;;                 pyim-probe-isearch-mode
       ;;                 pyim-probe-program-mode
       ;;                 pyim-probe-org-structure-template))

       ;; (setq-default pyim-punctuation-half-width-functions
       ;;               '(pyim-probe-punctuation-line-beginning
       ;;                 pyim-probe-punctuation-after-punctuation))

       ;; 开启拼音搜索功能
       (setq pyim-isearch-enable-pinyin-search t)

       ;; 使用 pupup-el 来绘制选词框
       (setq pyim-page-tooltip 'popup)

       ;; 选词框显示5个候选词
       (setq pyim-page-length 5)

       ;; 让 Emacs 启动时自动加载 pyim 词库
       (add-hook 'emacs-startup-hook
                 #'(lambda () (pyim-restart-1 t)))
       :bind
       (("M-j" . pyim-convert-code-at-point) ;与 pyim-probe-dynamic-english 配合
        ("C-;" . pyim-delete-word-from-personal-buffer)))
   #+END_SRC
** hightlight sexp
   #+BEGIN_SRC elispx
     (show-paren-mode 1)
     (setq show-paren-style 'expression)
   #+END_SRC
** use rainbow delimiters
   [[https://github.com/jlr/rainbow-delimiters][github]]
   #+BEGIN_SRC elisp
     (use-package rainbow-delimiters
       :ensure t
       :config
       (rainbow-delimiters-mode))
   #+END_SRC
** tranparent window
   #+BEGIN_SRC elisp
     (defun transparent-current-frame ()
       "Transparent the window"
       (interactive)
       (let ((current-alpha (frame-parameter nil 'alpha)))
         (if (eql 100 (cdr current-alpha))
             (set-frame-parameter (selected-frame) 'alpha '(75 . 50))
           (set-frame-parameter (selected-frame) 'alpha '(100 . 100)))))

     (general-define-key "<f3>" #'transparent-current-frame)
   #+END_SRC

   #+RESULTS:
   : transparent-current-frame
** run python3 envrioment
   #+BEGIN_SRC elisp
     (use-package python
       :init
       (setq python-shell-interpreter "python")
       (setq elpy-rpc-python-command "python")
       :mode ("\\.py\\'" . python-mode)
       :interpreter ("python" . python-mode)
       :config (elpy-enable))
   #+END_SRC
** smart parens
   #+BEGIN_SRC elisp
     (use-package smartparens
       :ensure t
       :config
       (add-hook 'prog-mode-hook #'smartparens-mode))
   #+END_SRC
   
   smart parens 的用法
   
   - sp-splice-sexp
     (emacs) -> emacs

   - sp-rewrapp-sexp
     (emacs) -> [emacs]

   - sp-forward-barf-sexp
     (emacs (emacs1)| (emacs2)) ->  (emacs (emacs1))(emacs2)

   - sp-forward-slurp-sexp
     (emacs (emacs1)|) (emacs2) -> (emacs (emacs1) (emacs2))

   - sp-forward-slurp-hybrid-sexp
     smae
** load theme 
*** old theme
   #+BEGIN_SRC elisp :tangle no
     (use-package anti-zenburn-theme
       :ensure t)

     (load-theme 'anti-zenburn t)
   #+END_SRC

   #+BEGIN_SRC elisp :tangle no
     (load-theme 'darcula t)
   #+END_SRC
*** use plan-9 theme
    Must set y twice on emacs startup!
    #+BEGIN_SRC elisp :tangle no
      (use-package plan9-theme
        :ensure t)

      (load-theme 'plan9)
    #+END_SRC
*** use doom-theme
    This theme has some problem in my emacs.
    #+BEGIN_SRC elisp :tangle no
      (use-package doom-themes
        :ensure t
        :config
        (doom-themes-org-config))

      (load-theme 'doom-one t)
    #+END_SRC
*** atom one dark
    #+BEGIN_SRC elisp :tangle no
      (use-package atom-one-dark-theme
        :ensure t)

      (load-theme 'atom-one-dark t)
    #+END_SRC
*** ample theme
    #+BEGIN_SRC elisp :tangle no
      (use-package ample-theme
        :init (progn (load-theme 'ample t t)
                     (load-theme 'ample-flat t t)
                     (load-theme 'ample-light t t)
                     (enable-theme 'ample-light))
        :defer t
        :ensure t)
    #+END_SRC
*** lenlen theme
    #+BEGIN_SRC elisp :tangle no
      (use-package solarized-theme
        :ensure t
        :init (load-theme 'solarized)
        :defer t)
    #+END_SRC
** expand-region
   #+BEGIN_SRC elisp
     (use-package expand-region
       :ensure t
       :commands (er/expand-region)
       :bind
       (("C-=" . er/expand-region)))
   #+END_SRC

** default setting what use customize
   #+BEGIN_SRC elisp
     (custom-set-faces
      ;; custom-set-faces was added by Custom.
      ;; If you edit it by hand, you could mess it up, so be careful.
      ;; Your init file should contain only one such instance.
      ;; If there is more than one, they won't work right.
      '(default ((t (:inherit nil :stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 112 :width normal :foundry "MS  " :family "YaHei Consolas Hybrid")))))
   #+END_SRC

*** set my default directory when emacs start
    #+BEGIN_SRC elisp
      (setq command-line-default-directory "~/")
      (setq default-directory "~/")
      (scroll-bar-mode -1) ; disable scroll bar
      (tool-bar-mode -1) ; disable tool bar
      (show-paren-mode) ; hight light match parens
      (setq inhibit-startup-screen t)
    #+END_SRC

*** set babel execute language
    #+BEGIN_SRC elisp
      (org-babel-do-load-languages
       'org-babel-load-languages '((clojure . t)
                                   (emacs-lisp . t)))
    #+END_SRC
** set convenient key chord
   
   general-key-dispatch 可以实现类似于 key-chord 的功能。
   general-key-dispatch 后面的函数表示如果按了指定的键以后没有按后续的按键（没有设定或者超时），
   则会执行的方法。（在这里是 self-insert-command, 将按键代表的字符字节插入）

   general-key-dispatch 不能重复定义，如果重复定义了，后面的会覆盖前面的
   #+BEGIN_SRC elisp :tangle no
     (general-define-key
      "s"
      (general-key-dispatch #'self-insert-command
        :timeout 0.2
        "s" #'save-buffer
        )) ; set 'ss' to save buffer
   #+END_SRC

   #+RESULTS:
*** set mm to set-mark-command
    when i pre 'mm', run set-mark-command, and notice me at message buffer

    #+BEGIN_SRC elisp :tangle no
      (defun set-mark-and-show-message (arg)
          "Run set mark command and show a message"
        (interactive "P")
        (message "Set Marked!")
        (set-mark-command arg))


      (general-define-key
       "m"
       (general-key-dispatch 'self-insert-command
         :timeout 0.2
         "m" 'set-mark-and-show-message
         "s" 'save-buffer))
    #+END_SRC
    
** org mode setting
*** set file to agenda view
    #+BEGIN_SRC elisp
      (general-define-key
       "C-c a" #'org-agenda)

      (setq org-agenda-files '("~/Documents/org/inbox.org"
                               "~/Documents/org/gtd.org"
                               "~/Documents/org/tickler.org"))
    #+END_SRC
*** org capture template
    | key       | operator                   |
    | "C-c c t" | insert task to inbox.org   |
    | "C-c c T" | insert task to tickler.org |

    #+BEGIN_SRC elisp
      (general-define-key "C-c c" #'org-capture)

      (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                     (file+headline "~/Documents/org/inbox.org" "Tasks")
                                     "* TODO %i%?")
                                    ("T" "Tickler" entry
                                     (file+headline "~/Documents/org/tickler.org" "Tickler")
                                     "* %i%? \n %U")))
    #+END_SRC
*** set org file todo keywords
    #+BEGIN_SRC elisp
     (setq org-todo-keywords '((sequence
                                 "TODO(t)"
                                 "WAITING(w)"
                                 "|"
                                 "DONE(d)"
                                 "CANCELLED(c)")))
    #+END_SRC
*** set refile target
    #+BEGIN_SRC elisp
      (setq org-refile-targets '(("~/Documents/org/gtd.org" :maxlevel . 3)
                                 ("~/Documents/org/someday.org" :level . 1)
                                 ("~/Documents/org/tickler.org" :maxlevel . 2)))
    #+END_SRC
** clojure
   - clojure package start so slow.
     [2017-07-21 周五]
     clojure and cider package startup use more than 3 seconds.
     so i add :commands keyword config.
     now clojure and cider not start on emacs startup.

   #+BEGIN_SRC elisp
     (use-package clojure-mode
       :ensure t
       :commands (clojure-mode clojurescript-mode)
       :config
       (use-package cider :ensure t)
       (show-paren-mode)

       (general-define-key
        :states '(insert emacs normal)
        :keymaps 'cider-repl-mode-map
        "M-p" 'ace-window)


       ;; in cider-stack-trace-mode set q to quit
       (general-define-key
        :state '(insert emacs normal)
        :keymaps 'cider-stacktrace-mode-map

        "M-p" 'ace-window ; 将 M-p 绑定到 ace-window， 获取一致的用户体验
        "C-p"  'cider-popup-buffer-quit-function))
   #+END_SRC

** workgroup2
   #+BEGIN_SRC elisp :tangle no
     (use-package workgroups2
       :ensure t
       :config
       (workgroups-mode t))
   #+END_SRC

   #+RESULTS:
** company
   #+BEGIN_SRC elisp
     (use-package company
       :ensure t
       :commands (company-mode)
       :init
       (add-hook 'prog-mode-hook 'company-mode))
   #+END_SRC
** dired+
   #+BEGIN_SRC elisp
     (use-package dired+
       :ensure t)
   #+END_SRC
** try
   try package and do not install it
   #+BEGIN_SRC elisp
     (use-package try
       :ensure t
       :commands try)
   #+END_SRC
** ace-window
   make move cursor to other window quickly and convinently
   #+BEGIN_SRC elisp
     (use-package ace-window
       :ensure t
       :commands (ace-window)
       :init
       (bind-key "M-p" 'ace-window))
   #+END_SRC
** evil
   #+BEGIN_SRC elisp
     (defun my--evil-config ()
       "Config my evil"
       (evil-mode 1)
       (general-evil-setup) ; can use general-nmap, general-mmap..

       (general-nmap :prefix "SPC"
                     "b" '(:ignore t :which-key "buffer")
                     "bb" '(ivy-switch-buffer :which-key "switch buffer")
                     "bp" '(switch-to-prev-buffer :which-key "prev buffer")
                     "bn" '(switch-to-next-buffer :which-key "next buffer")
                     "bk" '(kill-buffer :which-key "kill buffer")
                     "k" 'kill-buffer

                     "f" '(:ignore t :which-key "file")
                     "fr" 'counsel-recentf
                     "ff" '(counsel-find-file :which-key "find-file")

                     "s" '(:ignore t)
                     "ss" 'save-buffer
                     "sp" '(sp-forward-slurp-sexp :which-key "forward slurp")

                     "/" '(swiper :which-key "search")
                     "x" '(counsel-M-x :which-key "M-x"))

       (general-imap
        "j"
        (general-key-dispatch 'self-insert-command
          :timeout 0.25
          "k" 'evil-normal-state)))


     (use-package evil
       :ensure t
       :config
       (my--evil-config))
   #+END_SRC
** ace jump mode
   直接跳转到用户输入的字符上去
   [[https://github.com/winterTTr/ace-jump-mode][github]]
   #+BEGIN_SRC elisp
     (use-package ace-jump-mode
       :ensure t

       ;; use evil keymaps
       :config
       (general-define-key
        :states '(normal inert emacs)
        :prefix ","
        "f" '(ace-jump-word-mode :which-key "jump to word")
        "l" '(ace-jump-line-mode :which-key "jump to line")))
   #+END_SRC

** find file inproject 
   install on windows: 
   find file in project 需要 find 工具来查找文件，所以在 windows 上需要 cygwin 来配合
   #+BEGIN_SRC elisp :tangle no
     (if (eq system-type 'windows-nt)
         (setq ffip-find-executable "c:\\\\cygwin64\\\\bin\\\\find"))
   #+END_SRC
   
   #+BEGIN_SRC elisp
     (use-package find-file-in-project
       :ensure t
       :init
       (if (eq system-type 'windows-nt)
           (setq ffip-find-executable "c:\\\\cygwin\\\\bin\\\\find"))
       :config
       (general-define-key
        :states '(normal)
        :prefix "SPC"
        "p" '(:ignore t :which-key "prefix - find file in project")
        "pf" '(find-file-in-project :which-key "find file")))
        
   #+END_SRC

** use color theme
   #+BEGIN_SRC elisp :tangle no
     (use-package color-theme
       :ensure t)
   #+END_SRC
   
** eyebrowser
   #+BEGIN_SRC elisp
     (use-package eyebrowse
       :ensure t
       :config
       (setq eyebrowse-mode-line-separator " "
             eyebrowse-new-workspace t)
       (eyebrowse-mode t)
       ;; use desktop save the current state
       (desktop-change-dir "~/") ; my desktop.lock file in HOME directory
       )
        
   #+END_SRC

** symbol-overlay
   高亮符号的插件

   #+BEGIN_SRC elisp
     (use-package symbol-overlay
       :ensure t)
   #+END_SRC
   - 快捷键设置
     #+BEGIN_SRC elisp :tangle no
       (global-set-key (kbd "M-i") 'symbol-overlay-put)
       (global-set-key (kbd "M-n") 'symbol-overlay-switch-forward)
       (global-set-key (kbd "M-p") 'symbol-overlay-switch-backward)
       (global-set-key (kbd "<f7>") 'symbol-overlay-mode)
       (global-set-key (kbd "<f8>") 'symbol-overlay-remove-all)
     #+END_SRC
** key-fre
   这个扩展可以查看我的案件统计
   这样我就可以根据我自己的案件频率来调整优化快捷键
   #+BEGIN_SRC elisp     
     (use-package keyfreq
       :ensure t
       :config
       (keyfreq-mode 1)
       (keyfreq-autosave-mode 1)) 
   #+END_SRC
** Neotree
   #+BEGIN_SRC elisp
     (use-package neotree
       :ensure t
       :bind
       (("<f8>" . neotree-toggle)))
   #+END_SRC
** alchemist
   develop with elixir and erlang
   #+BEGIN_SRC elisp
     (use-package elixir-mode
       :mode ("\\.ex\\'" . elixir-mode)
       :config
       ;; start alchemist
       (use-package alchemist
         :ensure t))
   #+END_SRC
